#include <openssl/md5.h>

#include <advent.hwn>
#include <cmath>
#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <cstring>

int main() {
  char* input = advent::ReadEntireFile(advent::kInput.data());
  std::size_t input_len = std::strlen(input);
  std::uint8_t digest[MD5_DIGEST_LENGTH];
  bool part1 = false;
  bool part2 = false;
  std::size_t i = 0;
  while (!part2) {
    std::size_t key_len = input_len + advent::IntegerLog10(i);
    auto* key = (char*)std::malloc(key_len + 1);
    std::memcpy(key, input, input_len);
    advent::IntegerToString(i, key + input_len, key_len - input_len);
    key[key_len] = '\0';
    MD5((const std::uint8_t*)key, key_len, digest);
    if (!part1 && digest[0] == 0 && digest[1] == 0 && digest[2] <= 0xf) {
      part1 = true;
      std::printf("Part 1: %zu\n", i);
    }
    if (digest[0] == 0 && digest[1] == 0 && digest[2] == 0) {
      part2 = true;
      std::printf("Part 2: %zu\n", i);
    }
    std::free(key);
    ++i;
  }
  std::free(input);
  return 0;
}
