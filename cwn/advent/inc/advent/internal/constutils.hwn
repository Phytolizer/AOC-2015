#pragma once

#include <array>
#include <cstddef>
#include <type_traits>

namespace advent::internal::constutils {
template <unsigned...>
struct Seq {
  using Type = Seq;
};
template <unsigned N, unsigned... Is>
struct GenSeqX : GenSeqX<N - 1, N - 1, Is...> {};
template <unsigned... Is>
struct GenSeqX<0, Is...> : Seq<Is...> {};
template <unsigned N>
using GenSeq = typename GenSeqX<N>::Type;

template <std::size_t S>
using Size = std::integral_constant<std::size_t, S>;

template <class T, std::size_t N>
constexpr Size<N> Length(const T (&)[N]) {
  return {};
}
template <class T, std::size_t N>
constexpr Size<N> Length(const std::array<T, N>&) {
  return {};
}

template <class T>
using LengthT = decltype(Length(std::declval<T>()));

constexpr std::size_t StringSize() { return 0; }
template <class... Ts>
constexpr std::size_t StringSize(std::size_t i, Ts... ts) {
  return (i ? i - 1 : 0) + StringSize(ts...);
}
template <class... Ts>
using StringLength = Size<StringSize(LengthT<Ts>{}...)>;
template <class... Ts>
using String = std::array<char, StringLength<Ts...>{} + 1>;

template <class Lhs, class Rhs, unsigned... I1, unsigned... I2>
constexpr const String<Lhs, Rhs> ConcatImpl(const Lhs& lhs, const Rhs& rhs,
                                             Seq<I1...>, Seq<I2...>) {
  return {{lhs[I1]..., rhs[I2]..., '\0'}};
}

template <class Lhs, class Rhs>
constexpr const String<Lhs, Rhs> Concat(const Lhs& lhs, const Rhs& rhs) {
  return ConcatImpl(lhs, rhs, GenSeq<StringLength<Lhs>{}>{},
                     GenSeq<StringLength<Rhs>{}>{});
}

template <class T0, class T1, class... Ts>
constexpr const String<T0, T1, Ts...> Concat(const T0& t0, const T1& t1,
                                             const Ts&... ts) {
  return Concat(t0, Concat(t1, ts...));
}

template <class T>
constexpr const String<T> Concat(const T& t) {
  return Concat(t, "");
}

constexpr const String<> Concat() { return Concat(""); }

}  // namespace advent::internal::constconcat
