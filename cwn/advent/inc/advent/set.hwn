#pragma once

#include <cstddef>
#include <cstdint>

namespace advent {
struct Set {
 public:
  struct Bucket {
    void* key;
    std::size_t key_length;
  };

 private:
  static constexpr double kMaxLoad = 0.75;
  Bucket* FindBucket(Bucket* data, std::size_t capacity, const void* key,
                     std::size_t key_length) const;
  static constexpr std::uint64_t kFnvPrime = 0x00000100000001B3;
  static constexpr std::uint64_t kFnvOffsetBasis = 0xCBF29CE484222325;
  static std::uint64_t Hash(const void* key, std::size_t key_length);

 public:
  Bucket* data;
  std::size_t length;
  std::size_t capacity;

  Set();
  void Free();
  bool Insert(const void* key, std::size_t key_length);
  bool IsMember(const void* key, std::size_t key_length) const;
};
}  // namespace advent
