#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <cstring>

#include "advent.hwn"
#include "advent/set.hwn"

std::uint64_t advent::Set::Hash(const void* key, std::size_t key_length) {
  std::uint64_t hash = kFnvOffsetBasis;
  for (std::size_t i = 0; i < key_length; ++i) {
    hash ^= ((std::uint8_t*)key)[i];
    hash *= kFnvPrime;
  }
  return hash;
}

advent::Set::Bucket* advent::Set::FindBucket(Bucket* data, std::size_t capacity,
                                             const void* key,
                                             std::size_t key_length) const {
  std::uint64_t hash_value = Hash(key, key_length);
  std::size_t index = hash_value % capacity;
  while (data[index].key != nullptr &&
         !(data[index].key_length == key_length &&
           std::memcmp(data[index].key, key, key_length) == 0)) {
    index = (index + 1) % capacity;
  }
  return &data[index];
}

advent::Set::Set() : data(nullptr), length(0), capacity(0) {}

void advent::Set::Free() {
  for (std::size_t i = 0; i < capacity; ++i) {
    std::free(data[i].key);
  }
  std::free(data);
  data = nullptr;
  length = 0;
  capacity = 0;
}

bool advent::Set::Insert(const void* key, std::size_t key_length) {
  if (capacity == 0 || (double)length / capacity > kMaxLoad) {
    std::size_t old_capacity = capacity;
    capacity = capacity == 0 ? 1 : capacity * 2;
    auto* new_data = (Bucket*)std::malloc(capacity * sizeof(Bucket));
    std::memset(new_data, 0, capacity * sizeof(Bucket));
    for (std::size_t i = 0; i < old_capacity; ++i) {
      if (data[i].key != nullptr) {
        Bucket* bucket =
            FindBucket(new_data, capacity, data[i].key, data[i].key_length);
        bucket->key = data[i].key;
        bucket->key_length = data[i].key_length;
      }
    }
    std::free(data);
    data = new_data;
  }
  Bucket* bucket = FindBucket(data, capacity, key, key_length);
  if (bucket->key == nullptr) {
    bucket->key = advent::MemoryDuplicate(key, key_length);
    bucket->key_length = key_length;
    ++length;
    return true;
  }
  return false;
}

bool advent::Set::IsMember(const void* key, std::size_t key_length) const {
  Bucket* bucket = FindBucket(data, capacity, key, key_length);
  return bucket->key != nullptr;
}