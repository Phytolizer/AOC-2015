#include <advent.hwn>
#include <advent/pcre.hwn>
#include <cstddef>
#include <cstdio>

#include "advent/vector.hwn"

int main() {
  std::FILE* fp = std::fopen(advent::kInput.data, "r");
  if (fp == nullptr) {
    std::printf("Failed to open file: %s\n", advent::kInput.data);
    return 1;
  }

  int error_code;
  std::size_t error_offset;
  pcre2_code* code = pcre2_compile(
      (PCRE2_SPTR) R"re((turn on|turn off|toggle) (\d+),(\d+) through (\d+),(\d+))re",
      PCRE2_ZERO_TERMINATED, 0, &error_code, &error_offset, nullptr);
  if (code == nullptr) {
    PCRE2_UCHAR buffer[256];
    pcre2_get_error_message(error_code, buffer, sizeof(buffer));
    std::printf("PCRE2 compilation failed at offset %zu: %s\n", error_offset,
                buffer);
    return 1;
  }

  pcre2_match_data* match_data =
      pcre2_match_data_create_from_pattern(code, nullptr);
  if (match_data == nullptr) {
    std::printf("Failed to create match data\n");
    return 1;
  }

  advent::Vector<advent::Vector<bool>> light_field;
  for (std::size_t i = 0; i < 1000; ++i) {
    advent::Vector<bool> line;
    for (std::size_t j = 0; j < 1000; ++j) {
      line.Push(false);
    }
    light_field.Push(line);
  }

  char* line = nullptr;
  std::size_t line_len = 0;
  while (advent::GetLine(&line, &line_len, fp) != -1) {
    if (pcre2_match(code, (PCRE2_SPTR)line, PCRE2_ZERO_TERMINATED, 0, 0,
                    match_data, nullptr) < 0) {
      std::printf("PCRE2 match failed: %s\n", line);
      return 1;
    }

    PCRE2_SIZE* ovector = pcre2_get_ovector_pointer(match_data);
  }

  std::free(line);
  for (std::size_t i = 0; i < light_field.length; ++i) {
    light_field.data[i].Free();
  }
  light_field.Free();
  pcre2_match_data_free(match_data);
  pcre2_code_free(code);
  std::fclose(fp);
  return 0;
}
